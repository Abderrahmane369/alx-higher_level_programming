===============================
 How to Use doctest_in_help.py
===============================

This library is very simple, since it only has one function called
``matrix_divided()``.

Numbers
=======

``say_my_name()`` returns the product of its arguments.  For numbers,


    >>> say_my_name = __import__('3-say_my_name').say_my_name

::

    >>> say_my_name("LLL", "B")
    My name is LLL B

::

    >>> say_my_name("LLL")
    My name is LLL 

::

    >>> say_my_name(2, "B")
    Traceback (most recent call last):
    TypeError: first_name must be a string

::

    >>> say_my_name("LLL", 2)
    Traceback (most recent call last):
    TypeError: last_name must be a string

::

    >>> say_my_name(2, 2)
    Traceback (most recent call last):
    TypeError: first_name must be a string

::

    >>> say_my_name(2)
    Traceback (most recent call last):
    TypeError: first_name must be a string

::

    >>> say_my_name(None, "B")
    Traceback (most recent call last):
    TypeError: first_name must be a string

::

    >>> say_my_name("LLL", None)
    Traceback (most recent call last):
    TypeError: last_name must be a string

::

    >>> say_my_name(None, None)
    Traceback (most recent call last):
    TypeError: first_name must be a string

::

    >>> say_my_name(None)
    Traceback (most recent call last):
    TypeError: first_name must be a string

::

    >>> say_my_name("", "B")
    My name is  B

::

    >>> say_my_name("")
    My name is  

::

    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

::

    >>> say_my_name("A", "B", "C")
    Traceback (most recent call last):
    TypeError: say_my_name() takes from 1 to 2 positional arguments but 3 were given